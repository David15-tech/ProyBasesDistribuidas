/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import SQL.Conexion;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author davpa
 */
public class GUIMascotaHistory extends javax.swing.JFrame {

    /**
     * Creates new form GUIRegMascota
     */
    private boolean agregado = false;
    String txt;
    Object[] fila;
    String especie;
    
    public GUIMascotaHistory() {
        initComponents();
        
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width  - getSize().width) / 2, (Toolkit.getDefaultToolkit().getScreenSize().height - getSize().height) / 2);

        cmbEnfermedad.removeAllItems();
        cmbVacuna.removeAllItems();
        llenarEnfermedad();
        llenarVacuna();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMascReg = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cmbEnfermedad = new javax.swing.JComboBox<>();
        cmbVacuna = new javax.swing.JComboBox<>();
        txtFecha = new javax.swing.JTextField();
        btnEnfermedad = new javax.swing.JToggleButton();
        btnVacuna = new javax.swing.JToggleButton();

        jButton3.setText("jButton3");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial Medico"));

        tblMascReg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Linea Historial", "Nombre Mascota", "Fecha Cita medica", "Color", "Especie", "Raza", "Vacuna", "Enfermedad"
            }
        ));
        jScrollPane1.setViewportView(tblMascReg);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jButton2.setText("REGISTRAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informacion Cita Medica"));

        jLabel9.setText("Fecha:");

        jLabel10.setText("Vacuna:");

        jLabel11.setText("Enfermedad:");

        cmbEnfermedad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbVacuna.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEnfermedad.setText("...");
        btnEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnfermedadActionPerformed(evt);
            }
        });

        btnVacuna.setText("...");
        btnVacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVacunaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addGap(46, 46, 46))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(79, 79, 79)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(71, 71, 71)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbEnfermedad, javax.swing.GroupLayout.Alignment.LEADING, 0, 123, Short.MAX_VALUE)
                    .addComponent(cmbVacuna, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cmbEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnfermedad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVacuna))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 393, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButton2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        
        String fecha = txtFecha.getText();
        String vacuna = cmbVacuna.getSelectedItem().toString();
        String enfe = cmbEnfermedad.getSelectedItem().toString();
        
        
        try{
            int id_historial = getID("MASCOTA","ID_HISTORIAL", GUIConsultar.getMascota());
            int id_vacuna = getIDvac("VACUNACION", "ID_VACUNACION", vacuna);
            int id_enfermedad = getIDenf("ENFERMEDAD", "ID_ENFERMEDAD", enfe);
            
            
            PreparedStatement ps;
            Connection con = Conexion.getConexion();
            int linea = Conexion.llenarID("HISTORIAL_", "LINEA_HISTORIAL");
            ps = con.prepareStatement("set xact_abort on\n" +"begin distributed transaction\n" +
"insert into HISTORIAL_ (ID_HISTORIAL, LINEA_HISTORIAL, ID_VACUNACION, ID_ENFERMEDAD, FECHA_CITAMEDICA, CIUDAD) values (?,?,?,?,?,?)\n" +
"commit transaction");
            ps.setInt(1, id_historial);
            ps.setInt(2, linea);
            ps.setInt(3, id_vacuna);
            ps.setInt(4, id_enfermedad);
            ps.setString(5, fecha);
            ps.setString(6, Conexion.getCiudad());
            ps.executeUpdate();
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }      

        actualizarTabla();
    }//GEN-LAST:event_jButton2ActionPerformed

    private int getID(String tabla, String id, String nombre){
        int idFinal=0;
        try{
            PreparedStatement ps;
            ResultSet rs;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT "+id +" from "+tabla +" where nombre=?");
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            int columnas = rsmd.getColumnCount();
            while(rs.next()){
                for(int indice =0; indice < columnas; indice++){

                        idFinal = rs.getInt(indice +1);

                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return idFinal;
        
    }
    private int getIDenf(String tabla, String id, String nombre){
        int idFinal=0;
        try{
            PreparedStatement ps;
            ResultSet rs;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT "+id +" from "+tabla +" where NOM_ENFERMEDAD=?");
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            int columnas = rsmd.getColumnCount();
            while(rs.next()){
                for(int indice =0; indice < columnas; indice++){
                        idFinal = rs.getInt(indice +1);

                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return idFinal;
        
    }
    private int getIDvac(String tabla, String id, String nombre){
        int idFinal=0;
        try{
            PreparedStatement ps;
            ResultSet rs;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT "+id +" from "+tabla +" where NOM_VACUNA=?");
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            int columnas = rsmd.getColumnCount();
            while(rs.next()){
                for(int indice =0; indice < columnas; indice++){

                        idFinal = rs.getInt(indice +1);

                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return idFinal;
        
    }
    
    
    private void btnEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnfermedadActionPerformed
        // TODO add your handling code here:
        
        String enf = JOptionPane.showInputDialog(null, "Ingrese la enfermedad que desea agregar");
        agregarEnfermedad(enf);
        llenarEnfermedad();
        
        
        
    }//GEN-LAST:event_btnEnfermedadActionPerformed

    private void actualizarTabla(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblMascReg.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columna;
        
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("select H.LINEA_HISTORIAL,M.NOMBRE, FECHA_CITAMEDICA, C.NOMBRE as 'COLOR', R.NOMBRE as 'RAZA', E.NOMBRE as 'ESPECIE', V.NOM_VACUNA as 'VACUNA', EN.NOM_ENFERMEDAD as 'ENFERMEDAD'from (((((MASCOTA as M JOIN HISTORIAL as H ON M.ID_HISTORIAL=H.ID_HISTORIAL) JOIN COLORS as C ON M.ID_COLORS=C.ID_COLORS) JOIN RAZA as R ON M.ID_RAZA=R.ID_RAZA) JOIN ESPECIE as E ON M.ID_ESPECIE=E.ID_ESPECIE LEFT JOIN VACUNACION as V ON H.ID_VACUNACION = V.ID_VACUNACION) LEFT JOIN ENFERMEDAD as EN ON H.ID_ENFERMEDAD=EN.ID_ENFERMEDAD) where M.NOMBRE=?");
            ps.setString(1, GUIConsultar.getMascota());
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columna = rsmd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columna];
                for(int indice=0; indice<columna; indice++){
                    fila[indice] = rs.getObject(indice + 1);
                    System.out.println(rs.getObject(indice + 1));
                }
                modeloTabla.addRow(fila);
                
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
        
        
        
    
    }
    
    
    
    private void btnVacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVacunaActionPerformed
        // TODO add your handling code here:
        
        String enf = JOptionPane.showInputDialog(null, "Ingrese la Vacuna que desea agregar");
        agregarVacuna(enf);
        llenarVacuna();
        
        
    }//GEN-LAST:event_btnVacunaActionPerformed

    private void agregarEspecie(String especie){
                  
        try{
            PreparedStatement ps;
            Connection con = Conexion.getConexion();
            
            int id = Conexion.llenarID("ESPECIE", "ID_ESPECIE");
            ps = con.prepareStatement("insert into ESPECIE (ID_ESPECIE,NOMBRE) values (?,?)");
            ps.setInt(1, id);
            ps.setString(2, especie);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro realizado con exito");
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void agregarRaza(String especie, String raza){
                  
        try{
            
            ResultSet rs;
            ResultSetMetaData rsmd;
            PreparedStatement ps;
            Connection con = Conexion.getConexion();

            //Encontrar la id correspondiente a una raza segun su especie
            PreparedStatement ps1;
            int columnas;
            int idEspecie=0;
            ps1 = con.prepareStatement("Select ID_ESPECIE from ESPECIE where nombre = ?");
            ps1.setString(1, especie);
            rs = ps1.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();
            while(rs.next()){
                for(int indice =0; indice < columnas; indice++){
                    idEspecie = (int) rs.getObject(indice +1);
                }
            }

            int id_raza = Conexion.llenarID("RAZA", "ID_RAZA");
            ps = con.prepareStatement("insert into RAZA (ID_ESPECIE,ID_RAZA,NOMBRE) values (?,?,?)");
            ps.setInt(1, idEspecie);
            ps.setInt(2, id_raza);
            ps.setString(3, raza);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro realizado con exito");
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void agregarEnfermedad(String enf){
        
        try{
            PreparedStatement ps;
            Connection con = Conexion.getConexion();
            
            int id = Conexion.llenarID("ENFERMEDAD", "ID_ENFERMEDAD");
            ps = con.prepareStatement("insert into ENFERMEDAD (ID_ENFERMEDAD,NOM_ENFERMEDAD) values (?,?)");
            ps.setInt(1, id);
            ps.setString(2, enf);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro realizado con exito");
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
    }
    private void agregarVacuna(String vac){
        
        try{
            PreparedStatement ps;
            Connection con = Conexion.getConexion();
            
            int id = Conexion.llenarID("VACUNACION", "ID_VACUNACION");
            ps = con.prepareStatement("insert into VACUNACION (ID_VACUNACION,NOM_VACUNA) values (?,?)");
            ps.setInt(1, id);
            ps.setString(2, vac);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro realizado con exito");
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
    }

    private void llenarEnfermedad(){
        
        cmbEnfermedad.removeAllItems();
        int columnas;
        try{
            ResultSet rs;
            PreparedStatement ps;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT NOM_ENFERMEDAD FROM Enfermedad");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();
            
            
            while(rs.next()){

                for(int indice =0; indice < columnas; indice++){
                    cmbEnfermedad.addItem((String) rs.getObject(indice +1));
                }
            }
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
    }
    
    private void llenarVacuna(){
        int columnas;
        try{
            ResultSet rs;
            PreparedStatement ps;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT NOM_VACUNA FROM VACUNACION");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();
            
            while(rs.next()){

                for(int indice =0; indice < columnas; indice++){
                    cmbVacuna.addItem((String) rs.getObject(indice +1));
                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnEnfermedad;
    private javax.swing.JToggleButton btnVacuna;
    private javax.swing.JComboBox<String> cmbEnfermedad;
    private javax.swing.JComboBox<String> cmbVacuna;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMascReg;
    private javax.swing.JTextField txtFecha;
    // End of variables declaration//GEN-END:variables
}
