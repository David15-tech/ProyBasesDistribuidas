/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import SQL.Conexion;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author davpa
 */
public class GUIConsultar extends javax.swing.JFrame {

    /**
     * Creates new form GUIAgregar
     */
    String nombre;
    String apellido;
    private static String mascota=" ";
    GUIMascotaHistory mascReg;
    public GUIConsultar() {
        initComponents();
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width  - getSize().width) / 2, (Toolkit.getDefaultToolkit().getScreenSize().height - getSize().height) / 2);
        actualizarTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnIdent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Consulta de Información"));

        jLabel1.setText("Para revisar el historia medico, el usuario deberá identificarse;");

        btnIdent.setText("Identificarse");
        btnIdent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentActionPerformed(evt);
            }
        });

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Cedula", "Nombre Mascota"
            }
        ));
        jScrollPane1.setViewportView(tblInfo);

        jToggleButton1.setText("Agregar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Agregar registro de cita medica");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(btnIdent)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 209, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(196, 196, 196))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(jLabel2)
                .addGap(69, 69, 69)
                .addComponent(jToggleButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(btnIdent)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jLabel2))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIdentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentActionPerformed
        // TODO add your handling code here:

        Vector<String> vcNombre = new Vector<String>(llenarPersona());
        JComboBox cmbNombre = new JComboBox(vcNombre);
        cmbNombre.setEditable(true);
        JOptionPane.showMessageDialog(null, cmbNombre, "Nombre", JOptionPane.QUESTION_MESSAGE);
        nombre= (String) cmbNombre.getSelectedItem();
        
        
        Vector<String> vcApellido = new Vector<String>(llenarFamilia(nombre));
        JComboBox cmbApellido = new JComboBox(vcApellido);
        cmbApellido.setEditable(true);
        JOptionPane.showMessageDialog(null, cmbApellido, "Apellidos", JOptionPane.QUESTION_MESSAGE);
        apellido= (String) cmbApellido.getSelectedItem();
        
        Vector<String> vcMascota = new Vector<String>(llenarMascota(nombre,apellido));
        JComboBox cmbMascota = new JComboBox(vcMascota);
        cmbMascota.setEditable(true);
        JOptionPane.showMessageDialog(null, cmbMascota, "Mascota", JOptionPane.QUESTION_MESSAGE);
        this.setMascota((String) cmbMascota.getSelectedItem());
        
        actualizarTabla(); 
        
    }//GEN-LAST:event_btnIdentActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        this.setVisible(false);
        mascReg = new GUIMascotaHistory();
        mascReg.setVisible(true);
        
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void actualizarTabla(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblInfo.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columna;
        
        try{
            System.out.println(nombre);
            System.out.println(apellido);
            System.out.println(mascota);
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("select PERSONA.nombre, FAMILIA_CLIENTE.APELLIDO_FAMILIA,PERSONA.CEDULA, MASCOTA.NOMBRE  from PERSONA inner join FAMILIAS on PERSONA.ID_PERSONA=FAMILIAS.ID_PERSONA inner join FAMILIA_CLIENTE on FAMILIA_CLIENTE.ID_CLIENTE = FAMILIAS.ID_CLIENTE inner join MASCOTA on MASCOTA.ID_CLIENTE= FAMILIA_CLIENTE.ID_CLIENTE where PERSONA.NOMBRE=? and APELLIDO_FAMILIA=? and MASCOTA.NOMBRE=?");
            ps.setString(1, nombre);
            ps.setString(2, apellido);
            ps.setString(3, mascota);
            
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columna = rsmd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columna];
                for(int indice=0; indice<columna; indice++){
                    fila[indice] = rs.getObject(indice + 1);
                    System.out.println(rs.getObject(indice + 1));
                }
                modeloTabla.addRow(fila);
                
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
        
        
        
    
    }
    private List llenarPersona(){
        int columnas;
        List<String> reg = new ArrayList<String>();
        try{
            ResultSet rs;
            PreparedStatement ps;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("select nombre from PERSONA");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while(rs.next()){
                reg.add((String) rs.getObject(1));
            }
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
        return reg;
    }
    
    private List llenarFamilia(String nombre){
        int columnas;
        List<String> reg = new ArrayList<String>();
        try{
            ResultSet rs;
            PreparedStatement ps;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("select FAMILIA_CLIENTE.APELLIDO_FAMILIA  from PERSONA inner join FAMILIAS on PERSONA.ID_PERSONA=FAMILIAS.ID_PERSONA inner join FAMILIA_CLIENTE on FAMILIA_CLIENTE.ID_CLIENTE = FAMILIAS.ID_CLIENTE where PERSONA.NOMBRE=?");
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while(rs.next()){
                reg.add((String) rs.getObject(1));
            }
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
        return reg;
    }
        private List llenarMascota(String nombre, String apellido){
        int columnas;
        List<String> reg = new ArrayList<String>();
        try{
            ResultSet rs;
            PreparedStatement ps;
            ResultSetMetaData rsmd;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("select MASCOTA.NOMBRE from PERSONA inner join FAMILIAS on PERSONA.ID_PERSONA=FAMILIAS.ID_PERSONA inner join FAMILIA_CLIENTE on FAMILIA_CLIENTE.ID_CLIENTE = FAMILIAS.ID_CLIENTE inner join MASCOTA on MASCOTA.ID_CLIENTE= FAMILIA_CLIENTE.ID_CLIENTE where PERSONA.NOMBRE=? and FAMILIA_CLIENTE.APELLIDO_FAMILIA=?");
            ps.setString(1, nombre);
            ps.setString(2, apellido);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while(rs.next()){
                reg.add((String) rs.getObject(1));
            }
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
        return reg;
    }
        
        
    
    
    /**
     * @param args the command line arguments
     */

    public static String getMascota() {
        return mascota;
    }

    public static void setMascota(String mascota) {
        GUIConsultar.mascota = mascota;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIdent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tblInfo;
    // End of variables declaration//GEN-END:variables
}
